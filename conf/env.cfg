#!/bin/bash

function get_comp_env_name {
	if [ -n "$1" ]; then               export COMP="$1";
	elif [ -n "${PJM_COMMENT}" ]; then export COMP="${PJM_COMMENT}";
	else echo "ERR: cannot determine compiler env in fn get_comp_env_name"; exit 1;
	fi
}

function load_compiler_env {
	if [ -z "${XEONHOST}${IKNLHOST}${IKNMHOST}${FUJIHOST}${RFX7HOST}" ]; then
		echo "ERR: new env and/or host, no known compiler for it, please fix me"; exit 1
	fi
	if [[ "$1" = *"intel"* ]] || [[ "$1" = *"gnu"* ]] || [[ "$1" = *"fujitrad"* ]] || [[ "$1" = *"fujiclang"* ]] || [[ "$1" = *"gem5"* ]] || [[ "$1" = *"arm"* ]] || [[ "$1" = *"llvm12"* ]]; then
		COMP="$1"
	elif [ -n "${PJM_COMMENT}" ]; then
		COMP="${PJM_COMMENT}"
	else
		echo 'ERR: wrong compiler, only support [intel | gnu | fujitrad | fujiclang | gem5 | llvm12]'; exit 1
	fi

	if [ -n "${XEONHOST}" ] || [ -n "${IKNLHOST}" ] || [ -n "${IKNMHOST}" ]; then
		if [[ "${COMP}" = *"intel"* ]]; then
			source $ROOTDIR/conf/intel.cfg
			source $INTEL_PACKAGE intel64 > /dev/null 2>&1
			export I_MPI_CC=icc; export I_MPI_CXX=icpc
			export I_MPI_F77=ifort; export I_MPI_F90=ifort
			alias ar=$(which xiar)
			alias ld=$(which xild)
			export ADVISOR_2018_DIR=${ADVISOR_2019_DIR}
			source $ROOTDIR/dep/spack/share/spack/setup-env.sh
			spack load openmpi@3.1.6%intel@19.0.1.144
			export OMPI_CC=$I_MPI_CC; export OMPI_CXX=$I_MPI_CXX
			export OMPI_F77=$I_MPI_F77; export OMPI_FC=$I_MPI_F90
			export MPIRUNCMD="mpiexec"
		elif [[ "${COMP}" = *"gnu"* ]]; then
			source $ROOTDIR/conf/intel.cfg
			source $(echo $INTEL_PACKAGE | cut -d'/' -f-3)/mkl/bin/mklvars.sh intel64 > /dev/null 2>&1
			source $ROOTDIR/dep/spack/share/spack/setup-env.sh
			spack load gcc@8.4.0
			spack load openmpi@3.1.6%gcc@8.4.0
			export OMPI_CC=gcc; export OMPI_CXX=g++
			export OMPI_F77=gfortran; export OMPI_FC=gfortran
			export MAYBESTATIC="-static"
			export MPIRUNCMD="mpirun"
		else echo 'ERR: unsupported compiler on this platform'; exit 1
		fi
		ulimit -s unlimited
		ulimit -n 4096
	elif [ -n "${FUJIHOST}" ]; then
		if ! lscpu | grep 'sve' >/dev/null 2>&1; then
			echo "ERR: does not compile on login node; please use compute node"; exit 1
		elif [[ "${COMP}" = *"gnu"* ]]; then
			if ! which spack >/dev/null 2>&1; then . /vol0004/apps/oss/spack/share/spack/setup-env.sh; fi
			spack load gcc@10.2.0 arch=linux-rhel8-a64fx; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			spack load fujitsu-mpi%gcc arch=linux-rhel8-a64fx; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			spack load hwloc@1.11.11%fj; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			#spack load hwloc@2.2.0%gcc arch=linux-rhel8-a64fx; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			export OMPI_CC=gcc; export OMPI_CXX=g++
			export OMPI_F77=gfortran; export OMPI_FC=gfortran
			export FJMPI="Y"; export FJBLAS="Y"; export MAYBESTATIC=""
		elif [[ "${COMP}" = *"fujitrad"* ]] || [[ "${COMP}" = *"fujiclang"* ]]; then
			sleep 0
		elif [[ "${COMP}" = *"gem5"* ]]; then
			#module load FujitsuCompiler/202007
			export LD_LIBRARY_PATH=$ROOTDIR/dep/mpistub/lib:$LD_LIBRARY_PATH
		elif [[ "${COMP}" = *"arm"* ]]; then
			module load /opt/arm/modulefiles/A64FX/RHEL/8/arm-linux-compiler-20.3/armpl/20.3.0
			#module load /opt/arm/modulefiles/A64FX/RHEL/8/gcc-9.3.0/armpl/20.3.0
		elif [[ "${COMP}" = *"llvm12"* ]]; then
			if ! which spack >/dev/null 2>&1; then . /vol0004/apps/oss/spack/share/spack/setup-env.sh; fi
			#spack load llvm@12%gcc; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			spack load fujitsu-mpi%fj; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			spack load hwloc@1.11.11%fj; export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
			#
			LLVMDIR=$HOME/llvm-v12.0.0
			export PATH=$LLVMDIR/bin:$PATH
			export LD_LIBRARY_PATH=$LLVMDIR/lib:$LD_LIBRARY_PATH
			#
			export OMPI_CC=clang; export OMPI_CXX=clang++
			#export OMPI_F77=flang; export OMPI_FC=flang
			#export F18_FC=frt; export FORT90C="-Kfast,openmp,largepage,ocl,lto"; export FORT90CPX=${FORT90C}
		else echo 'ERR: unsupported compiler on this platform'; exit 1
		fi
		export MPIRUNCMD="mpiexec"
		if [ -n "$2" ]; then if [ "$2" -ge 1 ]; then ulimit -s $(("$2"*8192)); fi; else ulimit -s 8192; fi
		ulimit -i 32467
		ulimit -l 6384
		ulimit -q 819200
	elif [ -n "${RFX7HOST}" ]; then
		if ! lscpu | grep 'sve' >/dev/null 2>&1; then
			echo "ERR: does not compile on login node; please use compute node"; exit 1
		elif [[ "${COMP}" = *"gnu"* ]]; then
			module load /opt/arm/modulefiles/A64FX/RHEL/8/gcc-9.3.0/armpl/20.3.0
		elif [[ "${COMP}" = *"arm"* ]]; then
			module load /opt/arm/modulefiles/A64FX/RHEL/8/arm-linux-compiler-20.3/armpl/20.3.0
		else echo 'ERR: unsupported compiler on this platform'; exit 1
		fi
		export MPIRUNCMD="mpirun"
		if [ -n "$2" ]; then if [ "$2" -ge 1 ]; then ulimit -s $(("$2"*8192)); fi; else ulimit -s 8192; fi
	fi
}

function instrument_kernel {

	if [[ "$1" = *"intel"* ]]; then

		sleep 0

	elif [[ "$1" = *"gnu"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
		done

	elif [[ "$1" = *"fujitrad"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
			#sed -i  -e 's/.*include.*ittnotify\.h.*/#include "fj_tool\/fapp.h"\n#define __itt_resume() fapp_start("kernel",1,0);\n#define __itt_pause() fapp_stop("kernel",1,0);\n#define __SSC_MARK(hex)/' $FILE;
		done

	elif [[ "$1" = *"fujiclang"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
			#sed -i  -e 's/.*include.*ittnotify\.h.*/#include "fj_tool\/fapp.h"\n#define __itt_resume() fapp_start("kernel",1,0);\n#define __itt_pause() fapp_stop("kernel",1,0);\n#define __SSC_MARK(hex)/' $FILE;
		done

	elif [[ "$1" = *"gem5"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 199309L\n#endif\n#include <time.h>\n#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
			if ! [[ "$2" = *"DLproxy"* ]] && ! [[ "$2" = *"fs2020"* ]]; then
			sed -i  -e '/double mkrts, mkrte;/i struct timespec mkrtsclock;' \
				-e 's/mkrts = MPI_Wtime();/clock_gettime(CLOCK_MONOTONIC, \&mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);/' \
				-e 's/mkrte = MPI_Wtime();/clock_gettime(CLOCK_MONOTONIC, \&mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);/' $FILE;
			fi
		done

	elif [[ "$1" = *"arm"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
		done

	elif [[ "$1" = *"llvm12"* ]]; then

		for FILE in $(/bin/grep 'include.*ittnotify' -r "$2" | cut -d':' -f1 | sort -u); do
			sed -i  -e 's/.*include.*ittnotify\.h.*/#define __itt_resume()\n#define __itt_pause()\n#define __SSC_MARK(hex)/' $FILE;
		done

	fi
}

function get_mpi_cmd {
	NumRanks="$1"
	NumThreads="$2"
	MPIOutErr="$3"
	MPIsnowflake="$4"

	if [ -n "${XEONHOST}" ] || [ -n "${IKNLHOST}" ] || [ -n "${IKNMHOST}" ]; then
		NumCORES="$(( $(lscpu | /bin/grep ^Socket | cut -d ':' -f2) * $(lscpu | /bin/grep ^Core | cut -d ':' -f2) ))"
		MPIBaseCmd="${MPIRUNCMD} -np ${NumRanks} -x OMP_NUM_THREADS=${NumThreads} ${MPIsnowflake}"
		MPIExecOpt="--mca btl ^openib,tcp --oversubscribe --host $(hostname)"
		MPIMapping="--map-by slot:pe=$(((${NumCORES} / ${NumRanks}) + (${NumCORES} < ${NumRanks})))"
		MPIIOredir=""
	elif [ -n "${FUJIHOST}" ]; then
		MPIBaseCmd="${MPIRUNCMD} -np ${NumRanks} -x OMP_NUM_THREADS=${NumThreads} ${MPIsnowflake}"
		MPIExecOpt=""
		MPIMapping=""
		MPIIOredir="--std ${MPIOutErr}"
	elif [ -n "${RFX7HOST}" ]; then
		MPIBaseCmd="${MPIRUNCMD} -np ${NumRanks} -x OMP_NUM_THREADS=${NumThreads}"
		MPIExecOpt=""
		MPIMapping=""
		MPIIOredir=""
	fi

	echo ${MPIBaseCmd} ${MPIExecOpt} ${MPIMapping} ${MPIIOredir}
}

function clenup_after_mpi_cmd {
	if [ -n "${FUJIHOST}" ]; then
		for c in $(seq 1 20); do if pidof plexec >/dev/null 2>&1; then sleep "${c}"; else break; fi; done
	fi
}

function move_to_scratch_area {
	BenchRootDir="$1"
	BenchAppDir="$2"

	cd "${BenchRootDir}"
	AppRoot="$(readlink -f ${BenchAppDir} | sed -e "s#$(readlink -f $(pwd))/##g" | cut -d'/' -f1)"

	if [ -n "${XEONHOST}" ]; then
		ScratchArea="/scr0"
	elif [ -n "${IKNLHOST}" ] || [ -n "${IKNMHOST}" ]; then
		ScratchArea=""
	elif [ -n "${FUJIHOST}" ]; then
		ScratchArea="${PJM_LOCALTMP}"
	elif [ -n "${RFX7HOST}" ]; then
		ScratchArea="/tmp"
	fi

	if [ -n "${ScratchArea}" ]; then
		cp -r "${AppRoot}" "${ScratchArea}"/
		cd "${ScratchArea}/${BenchAppDir}"
		export APPROOT="$(readlink -f ${ScratchArea}/${AppRoot})"
	else
		cd "${BenchRootDir}/${BenchAppDir}"
		export APPROOT="$(readlink -f ${BenchRootDir}/${AppRoot})"
	fi
}

function maybe_submit_job {
	CompilerEnv="$1"
	BatchScript="$2"
	BenchConfig="$3"
	if [ -n "${FUJIHOST}" ] && ! lscpu | grep 'sve' >/dev/null 2>&1; then
		source "${BenchConfig}"
		cd "$( dirname ${BatchScript} )"
		if [[ "$( basename ${BatchScript} .sh )" = "best" ]]; then
			CONF="${BESTCONF}"
			secPerRun="$( echo ${MAXTIME} | sed -E 's/([0-9]+)m/\1*60/g' )"
			numRuns="${NumRunsBEST}"
		elif [[ "$( basename ${BatchScript} .sh )" = "test" ]]; then
			CONF="${TESTCONF}"
			secPerRun="$( echo ${MAXTIME} | sed -E 's/([0-9]+)m/\1*60/g' )"
			numRuns="${NumRunsTEST}"
		fi
		cpyBuf="10*60"
		subMPI="$( for C in ${CONF}; do echo ${C} | cut -d '|' -f1; done | sort -g -u )"
		for numMPI in ${subMPI}; do
			equMPI="$( for C in ${CONF}; do if [ $(echo ${C} | cut -d"|" -f1) -eq ${numMPI} ]; then echo ${C}; fi; done | wc -l )"
			estSec="$( echo "${equMPI} * ${secPerRun} * ${numRuns} + $cpyBuf" | bc )"

			reqWallTime="$((estSec/60/60)):$((estSec/60%60)):$((estSec%60))"
			if [ "$(echo "${reqWallTime}" | cut -d':' -f1)" -ge 24 ]; then reqWallTime="23:59:59"; fi	#XXX: take out later
			pjsub --comment="${CompilerEnv}" -L freq=2200 -L throttling_state=0 -L issue_state=0 -L ex_pipe_state=0 -L eco_state=0 -L node=1 -L rscunit=rscunit_ft01 -L rscgrp=small -L elapse="${reqWallTime}" \
				--llio localtmp-size=80Gi --mpi max-proc-per-node="${numMPI}" \
				${BatchScript}
		done
		exit
	elif [ -n "${RFX7HOST}" ] && ! lscpu | grep 'sve' >/dev/null 2>&1; then
		echo "ERR: no impl yet, fix me"; exit
	fi
}

function skip_conf {
	if [ -n "${FUJIHOST}" ] && ! [ "x$1" = "x${PJM_PROC_BY_NODE}" ]; then return 0; fi
	return 1
}

function run_gem5_cmd {
	export HOSTNAME="kiev0" # we don't care where gem runs
	GEM5ROOT="${GEM5ROOT:-$ROOTDIR/dep/gem5_riken}"
	GEM5="$GEM5ROOT/build/ARM/gem5.opt"
	GEM5SE="$GEM5ROOT/configs/example/se.py"
	LIBDIR=${LIBDIR:-${GEM5ROOT}/../lib}
	DYNAMIC_LAUNCHER=$LIBDIR/ld-linux-aarch64.so.1

	# special core pinning?
	if [ -n $2 ] && which numactl >/dev/null 2>&1; then PIN="numactl -C $2"; else PIN=""; fi

	if [ $1 -eq 1 ]; then
		ARCHCONF="--cpu-type=O3_ARM_PostK_3 --caches --l2_size=16MB --mem_bus_width=64 --mem_resp_width=128 --mem-size=32GB"    # traditional
	elif [ $1 -eq 2 ]; then
		ARCHCONF="--cpu-type=O3_ARM_PostK_3 --caches --l2_size=256MB --mem_bus_width=96 --mem_resp_width=192 --mem-size=32GB"   # aggressive
	else echo "err: missing which arch conf to run"; exit 1; fi

	if [ $1 -eq 1 ]; then NumOMP="20"; elif [ $1 -eq 2 ]; then NumOMP="32"; fi
	# echo -e "OMP_NUM_THREADS=$NumOMP\nOMP_NUM_PARALELL=$NumOMP\nFLIB_FASTOMP=FALSE\nFLIB_CNTL_BARRIER_ERR=FALSE" > ./omp${NumOMP}.txt
	echo -e "LD_LIBRARY_PATH=$LIBDIR\nOMP_NUM_THREADS=${NumOMP}\nFLIB_USE_CPURESOURCE_LIBOMP=FALSE" > ./omp${NumOMP}.txt

	echo "=== gem5 run ===" >> $LOG 2>&1
	CMD="$PIN $GEM5 -d ${LOG}_stat $GEM5SE -c $DYNAMIC_LAUNCHER -n $NumOMP -e ./omp${NumOMP}.txt $ARCHCONF"
	echo ${CMD} -o "$BINARY $INPUT" >> $LOG 2>&1
	${CMD} -o "$BINARY $INPUT" >> $LOG 2>&1
	# CMD="$PIN $GEM5 -d ${LOG}_stat $GEM5SE -c -o \"$BINARY $INPUT\" -n $NumOMP -e ./omp${NumOMP}.txt $ARCHCONF" 
	# $PIN $GEM5 -d ${LOG}_stat $GEM5SE -c $DYNAMIC_LAUNCHER -o "$BINARY $INPUT" -n $NumOMP -e ./omp${NumOMP}.txt $ARCHCONF >> $LOG 2>&1
}
