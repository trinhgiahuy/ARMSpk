From ff77db9db5bc096cdb4a8f4ab0cb6f2da56f47ea Mon Sep 17 00:00:00 2001
From: Jens Domke <domke.j.aa@m.titech.ac.jp>
Date: Fri, 23 Feb 2018 03:24:55 +0900
Subject: [PATCH 1/1] Laghos: prepare precision experiment

Signed-off-by: Jens Domke <domke.j.aa@m.titech.ac.jp>
---
 .gitignore        |  5 +++++
 laghos.cpp        | 14 +++++++++++++-
 laghos_solver.cpp | 24 +++++++++++++++++++++++-
 laghos_solver.hpp |  2 ++
 makefile          | 10 +++++-----
 5 files changed, 48 insertions(+), 7 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f848050
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+*.o
+*.tar.gz
+laghos
+hypre-2.10.0b/
+metis-4.0.3/
diff --git a/laghos.cpp b/laghos.cpp
index d808287..838ff8e 100644
--- a/laghos.cpp
+++ b/laghos.cpp
@@ -56,6 +56,12 @@
 #include <iostream>
 #include <fstream>
 
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE {if(!gmyid && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE {__SSC_MARK(0x222); __itt_pause(); if(!gmyid && getenv("PCMPID")) kill(atoi(getenv("PCMPID")), SIGUSR1);}
+
 using namespace std;
 using namespace mfem;
 using namespace mfem::hydrodynamics;
@@ -69,7 +75,8 @@ int main(int argc, char *argv[])
 {
    // Initialize MPI.
    MPI_Session mpi(argc, argv);
-   int myid = mpi.WorldRank();
+   int myid = gmyid = mpi.WorldRank();
+STOPSDE;
 
    // Print the banner.
    if (mpi.Root()) { display_banner(cout); }
@@ -145,6 +152,7 @@ int main(int argc, char *argv[])
    if (!args.Good())
    {
       if (mpi.Root()) { args.PrintUsage(cout); }
+STARTSDE;
       return 1;
    }
    if (mpi.Root()) { args.PrintOptions(cout); }
@@ -211,6 +219,7 @@ int main(int argc, char *argv[])
          }
          delete mesh;
          MPI_Finalize();
+STARTSDE;
          return 3;
    }
    int product = 1;
@@ -237,6 +246,7 @@ int main(int argc, char *argv[])
 #endif
       }
 #ifndef MFEM_USE_METIS
+STARTSDE;
       return 1;
 #endif
       pmesh = new ParMesh(MPI_COMM_WORLD, *mesh);
@@ -293,6 +303,7 @@ int main(int argc, char *argv[])
          }
          delete pmesh;
          MPI_Finalize();
+STARTSDE;
          return 3;
    }
 
@@ -573,6 +584,7 @@ int main(int argc, char *argv[])
    delete pmesh;
    delete material_pcf;
 
+STARTSDE;
    return 0;
 }
 
diff --git a/laghos_solver.cpp b/laghos_solver.cpp
index 6a4c210..619b98b 100644
--- a/laghos_solver.cpp
+++ b/laghos_solver.cpp
@@ -16,6 +16,12 @@
 
 #include "laghos_solver.hpp"
 
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE {if(!gmyid && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE {__SSC_MARK(0x222); __itt_pause(); if(!gmyid && getenv("PCMPID")) kill(atoi(getenv("PCMPID")), SIGUSR1);}
+
 #ifdef MFEM_USE_MPI
 
 using namespace std;
@@ -227,7 +233,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    {
       Force = 0.0;
       timer.sw_force.Start();
+STARTSDE;
       Force.Assemble();
+STOPSDE;
       timer.sw_force.Stop();
    }
 
@@ -236,7 +244,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    if (p_assembly)
    {
       timer.sw_force.Start();
+STARTSDE;
       ForcePA.Mult(one, rhs);
+STOPSDE;
       timer.sw_force.Stop();
       rhs.Neg();
 
@@ -248,7 +258,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
       cg.SetMaxIter(cg_max_iter);
       cg.SetPrintLevel(0);
       timer.sw_cgH1.Start();
+STARTSDE;
       cg.Mult(B, X);
+STOPSDE;
       timer.sw_cgH1.Stop();
       timer.H1cg_iter += cg.GetNumIterations();
       VMassPA.RecoverFEMSolution(X, rhs, dv);
@@ -257,7 +269,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    else
    {
       timer.sw_force.Start();
+STARTSDE;
       Force.Mult(one, rhs);
+STOPSDE;
       timer.sw_force.Stop();
       rhs.Neg();
 
@@ -269,7 +283,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
       cg.SetMaxIter(cg_max_iter);
       cg.SetPrintLevel(0);
       timer.sw_cgH1.Start();
+STARTSDE;
       cg.Mult(B, X);
+STOPSDE;
       timer.sw_cgH1.Stop();
       timer.H1cg_iter += cg.GetNumIterations();
       Mv.RecoverFEMSolution(X, rhs, dv);
@@ -290,7 +306,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    if (p_assembly)
    {
       timer.sw_force.Start();
+STARTSDE;
       ForcePA.MultTranspose(v, e_rhs);
+STOPSDE;
       timer.sw_force.Stop();
 
       if (e_source) { e_rhs += *e_source; }
@@ -309,7 +327,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    else
    {
       timer.sw_force.Start();
+STARTSDE;
       Force.MultTranspose(v, e_rhs);
+STOPSDE;
       timer.sw_force.Stop();
       if (e_source) { e_rhs += *e_source; }
       for (int z = 0; z < nzones; z++)
@@ -411,7 +431,7 @@ void LagrangianHydroOperator::PrintTimingData(bool IamRoot, int steps)
       cout << "UpdateQuadData rate (megaquads x timesteps / second): "
            << 1e-6 * alldata[1] * integ_rule.GetNPoints() / rt_max[3] << endl;
       cout << endl;
-      cout << "Major kernels total time (seconds): " << rt_max[4] << endl;
+      cout << "Walltime of the main kernel: " << rt_max[4] << " sec" << endl;
       cout << "Major kernels total rate (megadofs x time steps / second): "
            << 1e-6 * H1gsize * steps / rt_max[4] << endl;
    }
@@ -426,6 +446,7 @@ void LagrangianHydroOperator::UpdateQuadratureData(const Vector &S) const
 {
    if (quad_data_is_current) { return; }
    timer.sw_qdata.Start();
+STARTSDE;
 
    const int nqp = integ_rule.GetNPoints();
 
@@ -609,6 +630,7 @@ void LagrangianHydroOperator::UpdateQuadratureData(const Vector &S) const
    delete [] Jpr_b;
    quad_data_is_current = true;
 
+STOPSDE;
    timer.sw_qdata.Stop();
    timer.quad_tstep += nzones;
 }
diff --git a/laghos_solver.hpp b/laghos_solver.hpp
index 2c78a41..dbb327e 100644
--- a/laghos_solver.hpp
+++ b/laghos_solver.hpp
@@ -22,6 +22,8 @@
 
 #ifdef MFEM_USE_MPI
 
+static int gmyid = -1;
+
 #include <memory>
 #include <iostream>
 #include <fstream>
diff --git a/makefile b/makefile
index 6595e96..35c3fd9 100644
--- a/makefile
+++ b/makefile
@@ -51,7 +51,7 @@ PREFIX = ./bin
 INSTALL = /usr/bin/install
 
 # Use the MFEM build directory
-MFEM_DIR = ../mfem
+MFEM_DIR = ../dep/mfem
 CONFIG_MK = $(MFEM_DIR)/config/config.mk
 TEST_MK = $(MFEM_DIR)/config/test.mk
 # Use the MFEM install directory
@@ -74,16 +74,16 @@ endif
 
 CXX = $(MFEM_CXX)
 CPPFLAGS = $(MFEM_CPPFLAGS)
-CXXFLAGS = $(MFEM_CXXFLAGS)
+CXXFLAGS = $(MFEM_CXXFLAGS) -fopenmp -I${ADVISOR_2018_DIR}/include
 
 # MFEM config does not define C compiler
 CC     = gcc
 CFLAGS = -O3
 
 # Optional link flags
-LDFLAGS =
+LDFLAGS = -L${ADVISOR_2018_DIR}/lib64 -littnotify
 
-OPTIM_OPTS = -O3
+OPTIM_OPTS = -O3 -ipo -xHost
 DEBUG_OPTS = -g -Wall
 LAGHOS_DEBUG = $(MFEM_DEBUG)
 ifneq ($(LAGHOS_DEBUG),$(MFEM_DEBUG))
@@ -95,7 +95,7 @@ ifneq ($(LAGHOS_DEBUG),$(MFEM_DEBUG))
 endif
 
 LAGHOS_FLAGS = $(CPPFLAGS) $(CXXFLAGS) $(MFEM_INCFLAGS)
-LAGHOS_LIBS = $(MFEM_LIBS)
+LAGHOS_LIBS = $(MFEM_LIBS) -lirc -lsvml
 
 ifeq ($(LAGHOS_DEBUG),YES)
    LAGHOS_FLAGS += -DLAGHOS_DEBUG
-- 
1.8.3.1

