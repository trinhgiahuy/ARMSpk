From 7dbf0abe795a791dba03353ccb08508227c8ebaa Mon Sep 17 00:00:00 2001
From: Jens Domke <domke.j.aa@m.titech.ac.jp>
Date: Fri, 23 Feb 2018 03:24:55 +0900
Subject: [PATCH] Laghos: prepare precision experiment

Signed-off-by: Jens Domke <domke.j.aa@m.titech.ac.jp>
---
 .gitignore        |  5 +++++
 laghos.cpp        |  2 ++
 laghos_solver.cpp | 18 +++++++++++++++++-
 laghos_solver.hpp |  6 ++++++
 makefile          | 10 +++++-----
 5 files changed, 35 insertions(+), 6 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f848050
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+*.o
+*.tar.gz
+laghos
+hypre-2.10.0b/
+metis-4.0.3/
diff --git a/laghos.cpp b/laghos.cpp
index d808287..0b59f93 100644
--- a/laghos.cpp
+++ b/laghos.cpp
@@ -436,6 +436,7 @@ int main(int argc, char *argv[])
    bool last_step = false;
    int steps = 0;
    BlockVector S_old(S);
+STARTSDE(1,!mpi.Root());
    for (int ti = 1; !last_step; ti++)
    {
       if (t + dt >= t_final)
@@ -552,6 +553,7 @@ int main(int argc, char *argv[])
          }
       }
    }
+STOPSDE(1,!mpi.Root());
 
    switch (ode_solver_type)
    {
diff --git a/laghos_solver.cpp b/laghos_solver.cpp
index 6a4c210..5be925f 100644
--- a/laghos_solver.cpp
+++ b/laghos_solver.cpp
@@ -227,7 +227,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    {
       Force = 0.0;
       timer.sw_force.Start();
+//STARTSDE(0,0);
       Force.Assemble();
+//STOPSDE(0,0);
       timer.sw_force.Stop();
    }
 
@@ -236,7 +238,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    if (p_assembly)
    {
       timer.sw_force.Start();
+//STARTSDE(0,0);
       ForcePA.Mult(one, rhs);
+//STOPSDE(0,0);
       timer.sw_force.Stop();
       rhs.Neg();
 
@@ -248,7 +252,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
       cg.SetMaxIter(cg_max_iter);
       cg.SetPrintLevel(0);
       timer.sw_cgH1.Start();
+//STARTSDE(0,0);
       cg.Mult(B, X);
+//STOPSDE(0,0);
       timer.sw_cgH1.Stop();
       timer.H1cg_iter += cg.GetNumIterations();
       VMassPA.RecoverFEMSolution(X, rhs, dv);
@@ -257,7 +263,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    else
    {
       timer.sw_force.Start();
+//STARTSDE(0,0);
       Force.Mult(one, rhs);
+//STOPSDE(0,0);
       timer.sw_force.Stop();
       rhs.Neg();
 
@@ -269,7 +277,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
       cg.SetMaxIter(cg_max_iter);
       cg.SetPrintLevel(0);
       timer.sw_cgH1.Start();
+//STARTSDE(0,0);
       cg.Mult(B, X);
+//STOPSDE(0,0);
       timer.sw_cgH1.Stop();
       timer.H1cg_iter += cg.GetNumIterations();
       Mv.RecoverFEMSolution(X, rhs, dv);
@@ -290,7 +300,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    if (p_assembly)
    {
       timer.sw_force.Start();
+//STARTSDE(0,0);
       ForcePA.MultTranspose(v, e_rhs);
+//STOPSDE(0,0);
       timer.sw_force.Stop();
 
       if (e_source) { e_rhs += *e_source; }
@@ -309,7 +321,9 @@ void LagrangianHydroOperator::Mult(const Vector &S, Vector &dS_dt) const
    else
    {
       timer.sw_force.Start();
+//STARTSDE(0,0);
       Force.MultTranspose(v, e_rhs);
+//STOPSDE(0,0);
       timer.sw_force.Stop();
       if (e_source) { e_rhs += *e_source; }
       for (int z = 0; z < nzones; z++)
@@ -411,7 +425,7 @@ void LagrangianHydroOperator::PrintTimingData(bool IamRoot, int steps)
       cout << "UpdateQuadData rate (megaquads x timesteps / second): "
            << 1e-6 * alldata[1] * integ_rule.GetNPoints() / rt_max[3] << endl;
       cout << endl;
-      cout << "Major kernels total time (seconds): " << rt_max[4] << endl;
+      cout << "Walltime of the main kernel: " << rt_max[4] << " sec" << endl;
       cout << "Major kernels total rate (megadofs x time steps / second): "
            << 1e-6 * H1gsize * steps / rt_max[4] << endl;
    }
@@ -426,6 +440,7 @@ void LagrangianHydroOperator::UpdateQuadratureData(const Vector &S) const
 {
    if (quad_data_is_current) { return; }
    timer.sw_qdata.Start();
+//STARTSDE(0,0);
 
    const int nqp = integ_rule.GetNPoints();
 
@@ -609,6 +624,7 @@ void LagrangianHydroOperator::UpdateQuadratureData(const Vector &S) const
    delete [] Jpr_b;
    quad_data_is_current = true;
 
+//STOPSDE(0,0);
    timer.sw_qdata.Stop();
    timer.quad_tstep += nzones;
 }
diff --git a/laghos_solver.hpp b/laghos_solver.hpp
index 2c78a41..dc9cf57 100644
--- a/laghos_solver.hpp
+++ b/laghos_solver.hpp
@@ -20,6 +20,12 @@
 #include "mfem.hpp"
 #include "laghos_assembly.hpp"
 
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
 #ifdef MFEM_USE_MPI
 
 #include <memory>
diff --git a/makefile b/makefile
index 6595e96..35c3fd9 100644
--- a/makefile
+++ b/makefile
@@ -51,7 +51,7 @@ PREFIX = ./bin
 INSTALL = /usr/bin/install
 
 # Use the MFEM build directory
-MFEM_DIR = ../mfem
+MFEM_DIR = ../dep/mfem
 CONFIG_MK = $(MFEM_DIR)/config/config.mk
 TEST_MK = $(MFEM_DIR)/config/test.mk
 # Use the MFEM install directory
@@ -74,16 +74,16 @@ endif
 
 CXX = $(MFEM_CXX)
 CPPFLAGS = $(MFEM_CPPFLAGS)
-CXXFLAGS = $(MFEM_CXXFLAGS)
+CXXFLAGS = $(MFEM_CXXFLAGS) -fopenmp -I${ADVISOR_2018_DIR}/include
 
 # MFEM config does not define C compiler
 CC     = gcc
 CFLAGS = -O3
 
 # Optional link flags
-LDFLAGS =
+LDFLAGS = -L${ADVISOR_2018_DIR}/lib64 -littnotify
 
-OPTIM_OPTS = -O3
+OPTIM_OPTS = -O3 -ipo -xHost
 DEBUG_OPTS = -g -Wall
 LAGHOS_DEBUG = $(MFEM_DEBUG)
 ifneq ($(LAGHOS_DEBUG),$(MFEM_DEBUG))
@@ -95,7 +95,7 @@ ifneq ($(LAGHOS_DEBUG),$(MFEM_DEBUG))
 endif
 
 LAGHOS_FLAGS = $(CPPFLAGS) $(CXXFLAGS) $(MFEM_INCFLAGS)
-LAGHOS_LIBS = $(MFEM_LIBS)
+LAGHOS_LIBS = $(MFEM_LIBS) -lirc -lsvml
 
 ifeq ($(LAGHOS_DEBUG),YES)
    LAGHOS_FLAGS += -DLAGHOS_DEBUG
-- 
1.8.3.1

