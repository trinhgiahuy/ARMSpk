diff --color -Nur fs2020.old/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c fs2020/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c
--- fs2020.old/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c	2017-02-22 20:22:26.000000000 +0900
+++ fs2020/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c	2021-06-07 14:57:31.183486135 +0900
@@ -5,6 +5,13 @@
 #include <unistd.h>
 
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 #include "report.h"
 
 float fi[LOOP*3]                 __attribute__((aligned(32)));
@@ -66,7 +73,13 @@
 PROF_START_ALL;
 
 //PROF_START("1");
+double mkrts, mkrte; struct timespec mkrtsclock;
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);
   loop(fi, fj, r, lj, q, beta, n, s);
+STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);
 //PROF_STOP("1");
 
 PROF_STOP_ALL;
diff --color -Nur fs2020.old/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c fs2020/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c
--- fs2020.old/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c	2017-03-07 17:18:12.000000000 +0900
+++ fs2020/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c	2021-06-07 14:36:46.026677954 +0900
@@ -3,6 +3,13 @@
 #include <math.h>
 #include <omp.h>
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 #include "report.h"
 
 
@@ -241,8 +248,14 @@
 
 	PROF_START("1");
 
+double mkrts, mkrte; struct timespec mkrtsclock;;
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);
 	gravity_simple(eps*eps);
 	//	gravity_avx512(N, eps*eps, posm, accp);
+STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);
 
 	PROF_STOP("1");
 
diff --color -Nur fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90 fs2020/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90
--- fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90	2017-09-20 18:54:22.000000000 +0900
+++ fs2020/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90	2021-06-07 12:58:19.484926149 +0900
@@ -10,6 +10,21 @@
 contains
 
   subroutine kernel
+    use, intrinsic :: iso_c_binding
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     ! local variables
     real(4)                  :: dij1,dij2,dij3, rij2
@@ -69,6 +84,8 @@
     PROF_INIT
     PROF_START_ALL
     PROF_START("Nonb15F")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 
     !$omp parallel default(shared)                                          &
     !$omp private(id, i, ix, rtmp, qtmp, k, iy, ij, j, ii, rij2, L, L1, R,  &
@@ -165,6 +182,10 @@
 
     !$omp end parallel
 
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
     PROF_FINALIZE
diff --color -Nur fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/ssc.c fs2020/03.kernel_June1_Single_Tune_Full_pr64/ssc.c
--- fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/03.kernel_June1_Single_Tune_Full_pr64/ssc.c	2021-06-07 12:29:04.353704108 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/04.kernel_July_Single_c_m1_rvl/kernel_july.f90 fs2020/04.kernel_July_Single_c_m1_rvl/kernel_july.f90
--- fs2020.old/04.kernel_July_Single_c_m1_rvl/kernel_july.f90	2017-08-22 20:05:04.000000000 +0900
+++ fs2020/04.kernel_July_Single_c_m1_rvl/kernel_july.f90	2021-06-07 12:58:42.245080607 +0900
@@ -1,6 +1,20 @@
 #include "profiler.h"
 program nonbond_kernel
 
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+
   do step = 1, 1
 
     call kernel()
@@ -43,6 +57,8 @@
     integer,          pointer,contiguous :: natom(:,:), nb15_cell(:,:), nb15_list(:,:,:)
     integer,          pointer,contiguous :: virial_check(:,:,:)
     integer(1),       pointer,contiguous :: exclusion_mask1(:,:,:,:), exclusion_mask(:,:,:,:)
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     call set_pointer( cell_pairlist, nb15_cell, nb15_list, atmcls,    &
                       natom, coord, coord_pbc, force, virial, trans1, &
@@ -63,6 +79,8 @@
     PROF_INIT
     PROF_START_ALL
     PROF_START("Nonb15F")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
  
     !$omp parallel default(shared)                               &
     !$omp private(id, i, ix, rtmp, qtmp, k, iy, rij2, L, R,      &
@@ -278,6 +296,10 @@
 
     !$omp end parallel
 
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
     PROF_FINALIZE
diff --color -Nur fs2020.old/04.kernel_July_Single_c_m1_rvl/ssc.c fs2020/04.kernel_July_Single_c_m1_rvl/ssc.c
--- fs2020.old/04.kernel_July_Single_c_m1_rvl/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/04.kernel_July_Single_c_m1_rvl/ssc.c	2021-06-07 12:29:04.353704108 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90 fs2020/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90
--- fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90	2017-08-31 16:13:44.000000000 +0900
+++ fs2020/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90	2021-06-07 14:38:39.786574602 +0900
@@ -27,7 +27,22 @@
 
   use gparameter
 
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   integer  :: step, nthread, MaxAtom, ncell
   real(wp) :: start_time, end_time
@@ -63,6 +78,8 @@
     common /cb12/ cc_coord_pbc_z
   PROF_INIT
   PROF_START_ALL
+  !mkrts = omp_get_wtime()
+  !sscfake = SSC_MARK_START(1,0)
 
   call readset_parameters(gparam)
 
@@ -80,6 +97,10 @@
   enddo
   call report_validation(dble(val), 1.5581600d+05, 0.000001)
 
+  !sscfake = SSC_MARK_STOP(1,0)
+  !mkrte = omp_get_wtime()
+  !write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+  !   &  mkrte-mkrts, " sec", sscfake
   PROF_STOP_ALL
   PROF_FINALIZE
 
@@ -88,6 +109,22 @@
 contains
 
   subroutine kernel(gparam)
+    use, intrinsic :: iso_c_binding
+    implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     ! formal arguments
     type(s_genesis_kernel_param),   target, intent(inout)    :: gparam
@@ -127,6 +164,8 @@
     MaxAtom         = gparam%MaxAtom
 
     PROF_START('PairList_June')
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 
     num_nb15_total  = 0
 
@@ -134,10 +173,11 @@
     !$omp shared(nthread, ncell, natom, coord, trans1,                  &
     !$omp        num_nb15_calc, MaxAtom, ncell_local, exclusion_mask1,  &
     !$omp        nb15_calc_list, maxcell_near, cell_pairlist,           &
-    !$omp        exclusion_mask, pairdist2, maxcell)                    &
+    !$omp        exclusion_mask, pairdist2, maxcell,                    &
+    !$omp        coord_pbc_x,coord_pbc_y,coord_pbc_z)                   &
     !$omp private(id, i, ix, num_nb15, num_nb15_pre, iy, k, nb15_calc,  &
     !$omp         ij, j, rtmp, dij, num_nb15_cell, trans_x,             &
-    !$omp         trans_y, trans_z, coord_pbc_x,coord_pbc_y,coord_pbc_z,&
+    !$omp         trans_y, trans_z,                                     &
     !$omp         rij2_work, ik)
 
     id = mod(omp_get_thread_num(), nthread)
@@ -246,6 +286,10 @@
 
     !$omp end parallel
 
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+       &  mkrte-mkrts, " sec", sscfake
     PROF_STOP('PairList_June')
     return
 
diff --color -Nur fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/ssc.c fs2020/05.PairList_June_Single_simu2_c_rvl_align/ssc.c
--- fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/05.PairList_June_Single_simu2_c_rvl_align/ssc.c	2021-06-07 12:29:04.353704108 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90 fs2020/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90
--- fs2020.old/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90	2017-08-04 09:23:42.000000000 +0900
+++ fs2020/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90	2021-06-07 14:38:47.284633699 +0900
@@ -1,6 +1,20 @@
 #include "profiler.h"
 program nonbond_kernel
 
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+
   do step = 1, 1
 
     call kernel()
@@ -38,6 +52,8 @@
     integer, pointer,contiguous :: num_nb15_calc1(:,:), num_nb15_calc(:,:)
     integer, pointer,contiguous :: nb15_calc_list1(:,:), nb15_calc_list(:,:)
     integer(1),pointer,contiguous :: exclusion_mask(:,:,:,:)
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     call set_pointer( natom, cell_pairlist, cell_move, coord, trans1, &
                       nb15_cell, nb15_list, coord_pbc_x, coord_pbc_y, &
@@ -54,6 +70,8 @@
     PROF_INIT
     PROF_START_ALL
     PROF_START("PairList_July")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 
     num_nb15_total  = 0
 
@@ -202,6 +220,10 @@
 
     !$omp end parallel
     
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
     PROF_FINALIZE
diff --color -Nur fs2020.old/06.PairList_July_Single_tune_20170901/ssc.c fs2020/06.PairList_July_Single_tune_20170901/ssc.c
--- fs2020.old/06.PairList_July_Single_tune_20170901/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/06.PairList_July_Single_tune_20170901/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90 fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90
--- fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90	2017-04-20 14:10:00.000000000 +0900
+++ fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90	2021-06-07 12:39:12.905887272 +0900
@@ -540,8 +540,23 @@
        VMTR_RGAMH,       &
        VMTR_RGSQRTH,     &
        VMTR_C2WfactGz
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
     integer :: i
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     !fj<
 
     real(RP) :: ddivdx   (ADM_gall   ,ADM_kall,ADM_lall   )
@@ -590,6 +605,8 @@
                             VMTR_RGAM,VMTR_RGAMH,VMTR_RGSQRTH,VMTR_C2WfactGz)
 #endif
     PROF_START("divdamp")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_kernel_0)
 #endif
@@ -600,6 +617,10 @@
                             rhogvx, rhogvy, rhogvz, rhogw  , cinterp_TN, cinterp_HN,cinterp_TRA,cinterp_PRA, &
                             VMTR_RGAM,VMTR_RGAMH,VMTR_RGSQRTH,VMTR_C2WfactGz)
     end do
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("divdamp")
 #ifdef USE_TIMER
     call gettod(t_kernel)
diff --color -Nur fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c
--- fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90 fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90
--- fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90	2017-02-20 09:51:12.000000000 +0900
+++ fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90	2021-06-07 12:40:04.654242839 +0900
@@ -394,7 +394,22 @@
     use mod_oprt, only : &
         OPRT_snap_read, &
         OPRT_diffusion
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
     !fj>
     integer :: k,l
@@ -432,6 +447,8 @@
     !call OPRT_diffusion( dscl, dscl_pl, scl, scl_pl, kh, kh_pl, mfact)
     !cx call fapp_start( 'OPRT_diffusion', 1, 1 )
     PROF_START("OPRT_diffusion")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 !    do i=1,60
     do i=1,1
 
@@ -444,6 +461,10 @@
 !#endif
     end do
     !cx call fapp_stop( 'OPRT_diffusion', 1, 1 )
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("OPRT_diffusion")
 
     PROF_STOP_ALL
diff --color -Nur fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c
--- fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90 fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90
--- fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90	2017-03-29 15:04:28.000000000 +0900
+++ fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90	2021-06-07 14:39:22.098908102 +0900
@@ -23,7 +23,22 @@
     use mod_grd, only: XDIR=>GRD_XDIR, YDIR=>GRD_YDIR, ZDIR=>GRD_ZDIR,GRD_xr_ij
     use mod_oprt, only:  cinterp_HN_ij
 
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
     real(RP) flx_h_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -98,6 +113,8 @@
     end do
 #endif
     PROF_START("horizontal_flux")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_kernel_0)
 #endif
@@ -120,6 +137,10 @@
     call gettod(t_kernel)
     t_kernel = t_kernel - t_kernel_0
 #endif
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+       &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("horizontal_flux")
 #ifdef OUTPUTCHECK
     do l=1, ADM_lall
diff --color -Nur fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c
--- fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90 fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90
--- fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90	2017-04-07 19:44:18.000000000 +0900
+++ fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90	2021-06-07 13:00:42.947896412 +0900
@@ -24,7 +24,22 @@
        ADM_lall,    &
        ADM_lall_pl, &
        ADM_kall
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
 !!!    real(RP) q_a     (6,ADM_gall   ,ADM_kall,ADM_lall   )
@@ -106,6 +121,8 @@
                 (q_a, q_a_pl, q, q_pl, d, d_pl, ch, ch_pl, cmask, cmask_pl)
      
     PROF_START("horizontal_limiter_thuburn")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_kernel_0)
 #endif
@@ -121,6 +138,10 @@
     call gettod(t_kernel)
     t_kernel = t_kernel - t_kernel_0
 #endif
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+       &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("horizontal_limiter_thuburn")
 
 !fj 2016 output check q_a
diff --color -Nur fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c
--- fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90 fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90
--- fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90	2016-08-31 20:13:26.000000000 +0900
+++ fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90	2021-06-07 12:43:13.197649843 +0900
@@ -1,7 +1,6 @@
 #include "profiler.h"
 
 program main
-
     call dynamics_step
     stop
 end program main
@@ -19,7 +18,23 @@
        ADM_lall,    &
        ADM_lall_pl, &
        ADM_kall
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C::
+    !SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
     real(RP) :: q_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -65,6 +80,8 @@
 !    call vertical_limiter_thuburn (q_h_ij, q_h_pl, q_ij, q_pl, d_ij, d_pl, ck_ij, ck_pl)
 
     PROF_START("vertical_limiter_thuburn")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_kernel_0)
 #endif
@@ -76,6 +93,10 @@
     call gettod(t_kernel)
     t_kernel= t_kernel - t_kernel_0
 #endif
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("vertical_limiter_thuburn")
 
 #ifdef OUTPUTCHECK
diff --color -Nur fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c
--- fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90 fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90
--- fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90	2016-09-06 13:36:30.000000000 +0900
+++ fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90	2021-06-07 14:39:50.823134509 +0900
@@ -24,7 +24,23 @@
     use mod_vi
     use mod_grd 
 
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C::
+    !SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
     real(RP) rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
     real(RP) rhogw0_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -104,6 +120,8 @@
        dt                 )
 
     PROF_START("vi_rhow_solver")
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_kernel_0)
 #endif
@@ -125,6 +143,10 @@
     call gettod(t_kernel)
     t_kernel = t_kernel - t_kernel_0
 #endif
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     PROF_STOP("vi_rhow_solver")
 #ifdef USE_TIMER
     call gettod(t_all)
diff --color -Nur fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c
--- fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c	2021-06-07 12:29:04.354704115 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/14.streamlike_pattern1/main.f90 fs2020/14.streamlike_pattern1/main.f90
--- fs2020.old/14.streamlike_pattern1/main.f90	2017-04-09 14:49:52.000000000 +0900
+++ fs2020/14.streamlike_pattern1/main.f90	2021-06-07 14:40:15.655330247 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -75,6 +91,8 @@
   PROF_INIT
   PROF_START_ALL
   PROF_START(1)
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
 
@@ -94,6 +112,10 @@
 
   enddo
 
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
   PROF_STOP(1)
   PROF_STOP_ALL
   PROF_FINALIZE
diff --color -Nur fs2020.old/14.streamlike_pattern1/ssc.c fs2020/14.streamlike_pattern1/ssc.c
--- fs2020.old/14.streamlike_pattern1/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/14.streamlike_pattern1/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/15.streamlike_pattern2/main.f90 fs2020/15.streamlike_pattern2/main.f90
--- fs2020.old/15.streamlike_pattern2/main.f90	2017-04-09 14:54:04.000000000 +0900
+++ fs2020/15.streamlike_pattern2/main.f90	2021-06-07 14:40:38.122507323 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -75,6 +91,8 @@
   PROF_INIT
   PROF_START_ALL
   PROF_START(1)
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
 
@@ -98,6 +116,10 @@
 
   enddo
 
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
   PROF_STOP(1)
   PROF_STOP_ALL
   PROF_FINALIZE
diff --color -Nur fs2020.old/15.streamlike_pattern2/ssc.c fs2020/15.streamlike_pattern2/ssc.c
--- fs2020.old/15.streamlike_pattern2/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/15.streamlike_pattern2/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/16.streamlike_pattern3/main.f90 fs2020/16.streamlike_pattern3/main.f90
--- fs2020.old/16.streamlike_pattern3/main.f90	2017-04-09 14:57:26.000000000 +0900
+++ fs2020/16.streamlike_pattern3/main.f90	2021-06-07 14:40:46.762575421 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -75,6 +91,8 @@
   PROF_INIT
   PROF_START_ALL
   PROF_START(1)
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
 
@@ -89,6 +107,10 @@
 
   enddo
 
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
   PROF_STOP(1)
   PROF_STOP_ALL
   PROF_FINALIZE
diff --color -Nur fs2020.old/16.streamlike_pattern3/ssc.c fs2020/16.streamlike_pattern3/ssc.c
--- fs2020.old/16.streamlike_pattern3/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/16.streamlike_pattern3/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c fs2020/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c
--- fs2020.old/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c	2017-08-21 18:15:02.000000000 +0900
+++ fs2020/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c	2021-06-07 14:41:53.102098407 +0900
@@ -14,6 +14,13 @@
 //#include <fj_tool/fipp.h>
 //#include <fjcoll.h>
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 
 //#include "measure.h"
 //#include "matvec.h"
@@ -233,8 +240,8 @@
     svfloat64_t vec_m_5 = svld1_f64(p0, &vec_m[5][0]);
 
     for (jBlock = 0; jBlock < iBlock; jBlock++) {
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
 
       /* lower-triangular part: row-wised SIMD */
       svfloat64_t v_j    = svld1_f64(p0, &vector2[jBlock][0]);
@@ -282,8 +289,8 @@
 #else
 
     for (jBlock = 0; jBlock < iBlock; jBlock++) {
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
 
       /* lower-triangular part: row-wised SIMD */
 #pragma loop simd_redundant_vl 6
@@ -462,6 +469,7 @@
   /* add end */
   PROF_INIT;
   PROF_START_ALL;
+double mkrts, mkrte; struct timespec mkrtsclock;
   TheMatVec.instanceId = 0;
   TheMatVec.nDofs = SIZE;
   TheMatVec.nBlocks = MAX_DIAG_BLOCKS;
@@ -474,6 +482,9 @@
   for (iIteration = 0; iIteration < 2; iIteration++) {
   if(iIteration !=0 )  {
       PROF_START("region0");
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);
+
   }
   /*
   start_collection("region0_tune");
@@ -491,6 +502,9 @@
   stop_collection("region0_tune");
   */
   if(iIteration !=0 )  {
+STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);
       PROF_STOP("region0");
   }
 }
diff --color -Nur fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c
--- fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90 fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90
--- fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90	2016-10-11 14:46:56.000000000 +0900
+++ fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90	2021-06-07 12:47:31.913670040 +0900
@@ -1,9 +1,25 @@
 #include "profiler.h"
 program main
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
   !!$ use omp_lib
   external omp_get_thread_num
   integer omp_get_thread_num
-  implicit none
+
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
   integer(kind=  4),parameter :: N = 393216
 !  integer(kind=  4),parameter :: M = 12
   integer(kind=  4),parameter :: M = 24
@@ -60,6 +76,8 @@
   do itr=1,2
       if(itr > 1) then
           PROF_START("region1")
+          mkrts = omp_get_wtime()
+          sscfake = SSC_MARK_START(1,0)
       endif
      !$omp parallel default(shared), private(j, thread_num)
       thread_num = omp_get_thread_num()
@@ -71,6 +89,10 @@
      !$omp end do
      !$omp end parallel
       if(itr > 1) then
+          sscfake = SSC_MARK_STOP(1,0)
+          mkrte = omp_get_wtime()
+          write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+             &  mkrte-mkrts, " sec", sscfake
           PROF_STOP("region1")
       endif
   end do
diff --color -Nur fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c
--- fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90 fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90
--- fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90	2017-07-28 14:17:14.000000000 +0900
+++ fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90	2021-06-07 17:40:08.045519369 +0900
@@ -1,6 +1,22 @@
 #include "profiler.h"
 program main
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
   integer(kind=  4),parameter :: N = 393216
   integer(kind=  4),parameter :: M = 24
   integer(kind=  4),parameter :: RKP = 8
@@ -51,6 +67,10 @@
    vector_i(1) = real( 1.0E+00_8,kind=RKP)
   !
   do itr=1,2
+     if(itr > 1) then
+        mkrts = omp_get_wtime()
+        sscfake = SSC_MARK_START(1,0)
+     endif
      !$omp parallel default(shared), private(j)
      !$omp do
      do j=1,M
@@ -59,6 +79,12 @@
      end do
      !$omp end do
      !$omp end parallel
+     if(itr > 1) then
+        sscfake = SSC_MARK_STOP(1,0)
+        mkrte = omp_get_wtime()
+        write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+           &  mkrte-mkrts, " sec", sscfake
+     endif
   end do
   !
 !  write(6,'(e30.20)') real(vector_o(1),kind=8)
diff --color -Nur fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/callap_kernel2.F fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/callap_kernel2.F
--- fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/callap_kernel2.F	2016-07-28 08:49:24.000000000 +0900
+++ fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/callap_kernel2.F	2021-06-07 14:54:38.352136525 +0900
@@ -2,7 +2,23 @@
 
       subroutine callap_kernel2(MP, NP, ME, NE, IENP,
      *                          FXYZ, S, DNXP, DNYP, DNZP)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer(4),intent(in) :: MP, NP, ME, NE
@@ -23,6 +39,8 @@
       real(kind=8)         :: IRE, IAN, IER
 
       PROF_START("1")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,I,FXBUF,FYBUF,FZBUF,IE,SWRK) 
 !$omp&shared(NP,IENP,S,DNXP,DNYP,DNZP,FXYZ)
 !$omp do
@@ -46,6 +64,10 @@
       enddo
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("1")
 
       NP3 = NP * 3
diff --color -Nur fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c
--- fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ax4.f fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ax4.f
--- fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ax4.f	2017-05-09 10:23:30.000000000 +0900
+++ fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ax4.f	2021-06-07 15:09:16.392777967 +0900
@@ -3,7 +3,23 @@
 ! ax-04 vec1
 !-----------------------------------------------------------
       subroutine ax04_1(A, AX, X, NP, NP_ORG, LIST)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer*4 :: NP, NP_ORG
@@ -16,6 +32,8 @@
       integer*4 :: IP, II, JJ, NN, IP2
 
       PROF_START("AX04_1")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,II,JJ,IP2)
 !$omp&shared(NP,LIST,AX,A,X)
 !$omp do
@@ -28,6 +46,10 @@
       ENDDO
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the AX04_1 kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("AX04_1")
 
       return
@@ -37,7 +59,23 @@
 ! ax-04 vec2
 !-----------------------------------------------------------
       subroutine ax04_2(A, AX, X, NP, NP_ORG, LIST)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer*4 :: NP, NP_ORG
@@ -50,6 +88,8 @@
       integer*4 :: IP, II, JJ, NN, IP2
 
       PROF_START("AX04_2")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,II,JJ,IP2)
 !$omp&shared(NP,LIST,AX,A,X)
 !$omp do
@@ -69,6 +109,10 @@
       ENDDO
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the AX04_2 kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("AX04_2")
 
       return
@@ -78,7 +122,23 @@
 ! ax-04 vec4
 !-----------------------------------------------------------
       subroutine ax04_4(A, AX, X, NP, NP_ORG, LIST)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer*4 :: NP, NP_ORG
@@ -91,6 +151,8 @@
       integer*4 :: IP, II, JJ, NN, IP2
 
       PROF_START("AX04_4")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,II,JJ,IP2)
 !$omp&shared(NP,LIST,AX,A,X)
 !$omp do
@@ -112,6 +174,10 @@
       ENDDO
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the AX04_4 kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("AX04_4")
 
       return
@@ -121,7 +187,23 @@
 ! ax-04 vec6
 !-----------------------------------------------------------
       subroutine ax04_6(A, AX, X, NP, NP_ORG, LIST)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer*4 :: NP, NP_ORG
@@ -134,6 +216,8 @@
       integer*4 :: IP, II, JJ, NN, IP2
 
       PROF_START("AX04_6")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,II,JJ,IP2)
 !$omp&shared(NP,LIST,AX,A,X)
 !$omp do
@@ -157,6 +241,10 @@
       ENDDO
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the AX04_6 kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("AX04_6")
 
       return
@@ -166,7 +254,23 @@
 ! ax-04 vec8
 !-----------------------------------------------------------
       subroutine ax04_8(A, AX, X, NP, NP_ORG, LIST)
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! argument
       integer*4 :: NP, NP_ORG
@@ -179,6 +283,8 @@
       integer*4 :: IP, II, JJ, NN, IP2
 
       PROF_START("AX04_8")
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !$omp parallel default(none) private(IP,II,JJ,IP2)
 !$omp&shared(NP,LIST,AX,A,X)
 !$omp do
@@ -238,6 +344,10 @@
       ENDDO
 !$omp end do
 !$omp end parallel
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
+      write(*,"(A,d17.10,A,I4)") "Walltime of the AX04_8 kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       PROF_STOP("AX04_8")
 
       return
diff --color -Nur fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c
--- fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c	2021-06-07 12:29:04.355704122 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff --color -Nur fs2020.old/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/bicgstab_dd_mix.cc fs2020/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/bicgstab_dd_mix.cc
--- fs2020.old/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/bicgstab_dd_mix.cc	2017-02-14 16:59:36.000000000 +0900
+++ fs2020/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/bicgstab_dd_mix.cc	2021-06-07 15:39:41.630548613 +0900
@@ -1,6 +1,13 @@
 #include "qws.h"
 #include "qwsintrin.h"
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 
 #ifdef __cplusplus
 extern "C"{
@@ -31,12 +38,18 @@
     static int iter_s_l;
     int *iter_s = &iter_s_l;
 
+double mkrts, mkrte; struct timespec mkrtsclock;
 #ifndef RDC
     PROF_START("ddd_in_s_");
+    clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+    STARTSDE(1,0);
 #endif
     for (iter=1; iter<(*maxiter);iter++){
 #ifdef RDC
-      if(iter==2) PROF_START("ddd_in_s_"); // iter==1: warm up
+      if(iter==2) {PROF_START("ddd_in_s_"); // iter==1: warm up
+          clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+          STARTSDE(1,0);
+      }
 #endif
       // u = Mp
       // q = Au
@@ -46,6 +59,9 @@
       // t = Au
       approx_inv_dirac_op(0, 0, tol_s, iter_s, maxiter_s, nsap, nm);
     }//iter
+    STOPSDE(1,0);
+    clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+    fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);
     PROF_STOP("ddd_in_s_");
   }//bicgstab
 
diff --color -Nur fs2020.old/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/bicgstab_precdd_s.cc fs2020/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/bicgstab_precdd_s.cc
--- fs2020.old/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/bicgstab_precdd_s.cc	2017-07-20 12:53:34.000000000 +0900
+++ fs2020/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/bicgstab_precdd_s.cc	2021-06-07 16:49:06.294647001 +0900
@@ -18,6 +18,15 @@
 #include "time.h"
 #include "tools.h"
 
+extern int prof_flag;
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
 #ifdef __cplusplus
 extern "C"{
 #endif
@@ -46,6 +55,9 @@
     int i, j, iter;
 
     _BCG_PRECDDS_TIC_;
+    double mkrts, mkrte; struct timespec mkrtsclock;
+if(prof_flag == 1) {clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);}
 
 #if 0
     //------------------------------------------------------------------ flexible start
@@ -352,6 +364,9 @@
       _BCG_PRECDDS_ITER_TOC_;
     }//iter
     *conviter = iter;
+if(prof_flag == 1) {STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);}
     _BCG_PRECDDS_TOC_;
   }//bicgstab
 
