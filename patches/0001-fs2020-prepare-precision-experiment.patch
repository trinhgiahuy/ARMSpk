diff -Nur fs2020.old/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c fs2020/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c
--- fs2020.old/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c	2017-02-22 20:22:26.000000000 +0900
+++ fs2020/01.MD.LOOP.makino170209_Ccode.tune03_7loop_oclunroll.170316/main.c	2021-04-20 13:09:39.857929791 +0900
@@ -5,6 +5,13 @@
 #include <unistd.h>
 
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 #include "report.h"
 
 float fi[LOOP*3]                 __attribute__((aligned(32)));
@@ -62,15 +69,17 @@
 
 /*  printf("loop\n"); */
 
-PROF_INIT;
-PROF_START_ALL;
+double mkrts, mkrte; struct timespec mkrtsclock;;
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);;
 
 //PROF_START("1");
   loop(fi, fj, r, lj, q, beta, n, s);
 //PROF_STOP("1");
 
-PROF_STOP_ALL;
-PROF_FINALIZE;
+STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);;
 
 /*  printf("end\n"); */
 
diff -Nur fs2020.old/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c fs2020/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c
--- fs2020.old/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c	2017-03-07 17:18:12.000000000 +0900
+++ fs2020/02.gravity-512.simple.0.N2048_seq_b1_prolog.170316/test.c	2021-04-20 13:09:39.953929420 +0900
@@ -3,6 +3,13 @@
 #include <math.h>
 #include <omp.h>
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 #include "report.h"
 
 
@@ -236,8 +243,9 @@
 	}
 
 //	const double t0 = omp_get_wtime();
-	PROF_INIT;
-	PROF_START_ALL;
+	double mkrts, mkrte; struct timespec mkrtsclock;;
+	clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);;
 
 	PROF_START("1");
 
@@ -246,8 +254,9 @@
 
 	PROF_STOP("1");
 
-	PROF_STOP_ALL;
-	PROF_FINALIZE;
+	STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+	fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);;
 //	const double t1 = omp_get_wtime();
 
 /*
diff -Nur fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90 fs2020/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90
--- fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90	2017-09-20 18:54:22.000000000 +0900
+++ fs2020/03.kernel_June1_Single_Tune_Full_pr64/kernel_June_1.F90	2021-04-20 13:09:40.137928709 +0900
@@ -10,6 +10,21 @@
 contains
 
   subroutine kernel
+    use, intrinsic :: iso_c_binding
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     ! local variables
     real(4)                  :: dij1,dij2,dij3, rij2
@@ -68,6 +83,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
     PROF_START("Nonb15F")
 
     !$omp parallel default(shared)                                          &
@@ -167,7 +184,11 @@
 
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
     Val=0.0d0
     do k=1,256
diff -Nur fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/ssc.c fs2020/03.kernel_June1_Single_Tune_Full_pr64/ssc.c
--- fs2020.old/03.kernel_June1_Single_Tune_Full_pr64/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/03.kernel_June1_Single_Tune_Full_pr64/ssc.c	2021-04-20 13:09:40.199928470 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/04.kernel_July_Single_c_m1_rvl/kernel_july.f90 fs2020/04.kernel_July_Single_c_m1_rvl/kernel_july.f90
--- fs2020.old/04.kernel_July_Single_c_m1_rvl/kernel_july.f90	2017-08-22 20:05:04.000000000 +0900
+++ fs2020/04.kernel_July_Single_c_m1_rvl/kernel_july.f90	2021-04-20 13:09:40.287928130 +0900
@@ -1,6 +1,20 @@
 #include "profiler.h"
 program nonbond_kernel
 
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+
   do step = 1, 1
 
     call kernel()
@@ -43,6 +57,8 @@
     integer,          pointer,contiguous :: natom(:,:), nb15_cell(:,:), nb15_list(:,:,:)
     integer,          pointer,contiguous :: virial_check(:,:,:)
     integer(1),       pointer,contiguous :: exclusion_mask1(:,:,:,:), exclusion_mask(:,:,:,:)
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     call set_pointer( cell_pairlist, nb15_cell, nb15_list, atmcls,    &
                       natom, coord, coord_pbc, force, virial, trans1, &
@@ -62,6 +78,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
     PROF_START("Nonb15F")
  
     !$omp parallel default(shared)                               &
@@ -280,7 +298,11 @@
 
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
     val=0.0d0
     do k = 1,256
diff -Nur fs2020.old/04.kernel_July_Single_c_m1_rvl/ssc.c fs2020/04.kernel_July_Single_c_m1_rvl/ssc.c
--- fs2020.old/04.kernel_July_Single_c_m1_rvl/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/04.kernel_July_Single_c_m1_rvl/ssc.c	2021-04-20 13:09:40.353927875 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90 fs2020/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90
--- fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90	2017-08-31 16:13:44.000000000 +0900
+++ fs2020/05.PairList_June_Single_simu2_c_rvl_align/kernel_pairlist_june.F90	2021-04-20 13:13:33.856026111 +0900
@@ -26,8 +26,22 @@
 program nonbond_kernel
 
   use gparameter
-
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   integer  :: step, nthread, MaxAtom, ncell
   real(wp) :: start_time, end_time
@@ -63,6 +77,8 @@
     common /cb12/ cc_coord_pbc_z
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
 
   call readset_parameters(gparam)
 
@@ -81,7 +97,11 @@
   call report_validation(dble(val), 1.5581600d+05, 0.000001)
 
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
 stop
 
@@ -134,10 +154,11 @@
     !$omp shared(nthread, ncell, natom, coord, trans1,                  &
     !$omp        num_nb15_calc, MaxAtom, ncell_local, exclusion_mask1,  &
     !$omp        nb15_calc_list, maxcell_near, cell_pairlist,           &
-    !$omp        exclusion_mask, pairdist2, maxcell)                    &
+    !$omp        exclusion_mask, pairdist2, maxcell,                    &
+    !$omp        coord_pbc_x,coord_pbc_y,coord_pbc_z)                   &
     !$omp private(id, i, ix, num_nb15, num_nb15_pre, iy, k, nb15_calc,  &
     !$omp         ij, j, rtmp, dij, num_nb15_cell, trans_x,             &
-    !$omp         trans_y, trans_z, coord_pbc_x,coord_pbc_y,coord_pbc_z,&
+    !$omp         trans_y, trans_z,                                     &
     !$omp         rij2_work, ik)
 
     id = mod(omp_get_thread_num(), nthread)
diff -Nur fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/ssc.c fs2020/05.PairList_June_Single_simu2_c_rvl_align/ssc.c
--- fs2020.old/05.PairList_June_Single_simu2_c_rvl_align/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/05.PairList_June_Single_simu2_c_rvl_align/ssc.c	2021-04-20 13:09:40.528927200 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90 fs2020/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90
--- fs2020.old/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90	2017-08-04 09:23:42.000000000 +0900
+++ fs2020/06.PairList_July_Single_tune_20170901/kernel_pairlist_july.f90	2021-04-20 13:09:40.587926972 +0900
@@ -1,6 +1,20 @@
 #include "profiler.h"
 program nonbond_kernel
 
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+  end function
+  end interface
+
   do step = 1, 1
 
     call kernel()
@@ -38,6 +52,8 @@
     integer, pointer,contiguous :: num_nb15_calc1(:,:), num_nb15_calc(:,:)
     integer, pointer,contiguous :: nb15_calc_list1(:,:), nb15_calc_list(:,:)
     integer(1),pointer,contiguous :: exclusion_mask(:,:,:,:)
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
 
     call set_pointer( natom, cell_pairlist, cell_move, coord, trans1, &
                       nb15_cell, nb15_list, coord_pbc_x, coord_pbc_y, &
@@ -53,6 +69,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
     PROF_START("PairList_July")
 
     num_nb15_total  = 0
@@ -204,7 +222,11 @@
     
     PROF_STOP("Nonb15F")
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
     val=0.d0
     do j=1,3000
       do i=1,200
diff -Nur fs2020.old/06.PairList_July_Single_tune_20170901/ssc.c fs2020/06.PairList_July_Single_tune_20170901/ssc.c
--- fs2020.old/06.PairList_July_Single_tune_20170901/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/06.PairList_July_Single_tune_20170901/ssc.c	2021-04-20 13:09:40.670926651 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90 fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90
--- fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90	2017-04-20 14:10:00.000000000 +0900
+++ fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/postK_nicam_divdamp_ijsplit_tune03.f90	2021-04-20 13:09:40.726926435 +0900
@@ -540,8 +540,23 @@
        VMTR_RGAMH,       &
        VMTR_RGSQRTH,     &
        VMTR_C2WfactGz
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
     integer :: i
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     !fj<
 
     real(RP) :: ddivdx   (ADM_gall   ,ADM_kall,ADM_lall   )
@@ -577,6 +592,8 @@
 #endif
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_all_0)
 #endif
@@ -610,7 +627,11 @@
     t_all = t_all - t_all_0
 #endif
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 #ifdef USE_TIMER
     write(*,*)"t_kernel ",t_kernel
     write(*,*)"t_all ",t_all
diff -Nur fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c
--- fs2020.old/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/08.NICAM.divdamp.r4_collapsed.tune01.170420/ssc.c	2021-04-20 13:09:40.820926072 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90 fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90
--- fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90	2017-02-20 09:51:12.000000000 +0900
+++ fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/postK_nicam_diffusion.f90	2021-04-20 13:09:40.955925551 +0900
@@ -394,7 +394,22 @@
     use mod_oprt, only : &
         OPRT_snap_read, &
         OPRT_diffusion
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
     !fj>
     integer :: k,l
@@ -418,6 +433,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 
     call OPRT_snap_read( scl, scl_pl, kh, kh_pl, mfact )
 !    write(0,'(a)') "starting the <OPRT_diffusion> loop"
@@ -447,7 +464,11 @@
     PROF_STOP("OPRT_diffusion")
 
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
 #ifdef OUTPUTCHECK
     do l=1, ADM_lall
diff -Nur fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c
--- fs2020.old/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/09.NICAM.diffusion.tune_r4.asis_opttune01.170220/ssc.c	2021-04-20 13:09:41.054925168 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90 fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90
--- fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90	2017-03-29 15:04:28.000000000 +0900
+++ fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/main.f90	2021-04-20 13:09:41.105924971 +0900
@@ -22,8 +22,22 @@
     use mod_adm, only: AI=>ADM_AI, AJ=>ADM_AJ, K0=>ADM_KNONE
     use mod_grd, only: XDIR=>GRD_XDIR, YDIR=>GRD_YDIR, ZDIR=>GRD_ZDIR,GRD_xr_ij
     use mod_oprt, only:  cinterp_HN_ij
-
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
     real(RP) flx_h_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -66,6 +80,8 @@
 #endif
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_all_0)
 #endif
@@ -169,7 +185,11 @@
     t_all = t_all - t_all_0
 #endif
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE 
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake 
 #ifdef USE_TIMER
     write(*,*)"t_kernel ",t_kernel
     write(*,*)"t_all ",t_all
diff -Nur fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c
--- fs2020.old/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/10.NICAM.Horizontal_Adv_flux.r4_collapsed.tune03_kpara.30.170418/ssc.c	2021-04-20 13:09:41.204924589 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90 fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90
--- fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90	2017-04-07 19:44:18.000000000 +0900
+++ fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/main.f90	2021-04-20 13:09:41.325924122 +0900
@@ -24,7 +24,22 @@
        ADM_lall,    &
        ADM_lall_pl, &
        ADM_kall
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
 !!!    real(RP) q_a     (6,ADM_gall   ,ADM_kall,ADM_lall   )
@@ -61,6 +76,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_all_0)
 #endif
@@ -153,7 +170,11 @@
     t_all = t_all - t_all_0
 #endif
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE 
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake 
 #ifdef USE_TIMER
     write(*,*)"t_kernel ",t_kernel
     write(*,*)"t_all ",t_all
diff -Nur fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c
--- fs2020.old/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/11.NICAM.Horizontal_Adv_limiter.tune_r4.tune01.170407/ssc.c	2021-04-20 13:09:41.415923774 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90 fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90
--- fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90	2016-08-31 20:13:26.000000000 +0900
+++ fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/main.f90	2021-04-20 13:09:41.466923577 +0900
@@ -1,7 +1,6 @@
 #include "profiler.h"
 
 program main
-
     call dynamics_step
     stop
 end program main
@@ -19,7 +18,23 @@
        ADM_lall,    &
        ADM_lall_pl, &
        ADM_kall
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C::
+    !SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
 
     real(RP) :: q_h_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -41,6 +56,8 @@
 
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_all_0)
 #endif
@@ -99,7 +116,11 @@
     t_all= t_all - t_all_0
 #endif
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 #ifdef USE_TIMER
     write(*,*)"t_kernel ",t_kernel
     write(*,*)"t_all ",t_all
diff -Nur fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c
--- fs2020.old/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/12.NICAM.Vertical_Adv_limiter.tune_r4.asis_opttune01.160902/ssc.c	2021-04-20 13:09:41.557923226 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90 fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90
--- fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90	2016-09-06 13:36:30.000000000 +0900
+++ fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/main.f90	2021-04-20 13:09:41.625922963 +0900
@@ -23,8 +23,23 @@
     use mod_vmtr
     use mod_vi
     use mod_grd 
-
+    use, intrinsic :: iso_c_binding
     implicit none
+    interface
+    integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT), value :: i,j
+    !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+    end function
+    integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+    use, intrinsic :: iso_c_binding
+    integer(C_INT),value :: i,j
+    !!!DEC$ ATTRIBUTES C::
+    !SSC_MARK_STOP
+    end function
+    end interface
+    double precision :: mkrts, mkrte, omp_get_wtime
+    integer(C_INT) :: sscfake = 1
     integer :: i
     real(RP) rhogw_pl (ADM_gall_pl,ADM_kall,ADM_lall_pl)
     real(RP) rhogw0_pl(ADM_gall_pl,ADM_kall,ADM_lall_pl)
@@ -57,6 +72,8 @@
 #endif
     PROF_INIT
     PROF_START_ALL
+    mkrts = omp_get_wtime()
+    sscfake = SSC_MARK_START(1,0)
 #ifdef USE_TIMER
     call gettod(t_all_0)
 #endif
@@ -131,7 +148,11 @@
     t_all = t_all - t_all_0    
 #endif
     PROF_STOP_ALL
+    sscfake = SSC_MARK_STOP(1,0)
+    mkrte = omp_get_wtime()
     PROF_FINALIZE
+    write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 #ifdef USE_TIMER
     write(*,*)"t_kernel ",t_kernel
     write(*,*)"t_all ",t_all
diff -Nur fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c
--- fs2020.old/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/13.NICAM.vi_rhow_solver.tune_r4.asis.160902/ssc.c	2021-04-20 13:09:43.074917367 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/14.streamlike_pattern1/main.f90 fs2020/14.streamlike_pattern1/main.f90
--- fs2020.old/14.streamlike_pattern1/main.f90	2017-04-09 14:49:52.000000000 +0900
+++ fs2020/14.streamlike_pattern1/main.f90	2021-04-20 13:09:44.275912729 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -74,6 +90,8 @@
 
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
   PROF_START(1)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
@@ -96,7 +114,11 @@
 
   PROF_STOP(1)
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
   stop
 end program commonkernel_streamlike
diff -Nur fs2020.old/14.streamlike_pattern1/ssc.c fs2020/14.streamlike_pattern1/ssc.c
--- fs2020.old/14.streamlike_pattern1/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/14.streamlike_pattern1/ssc.c	2021-04-20 13:09:44.416912184 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/15.streamlike_pattern2/main.f90 fs2020/15.streamlike_pattern2/main.f90
--- fs2020.old/15.streamlike_pattern2/main.f90	2017-04-09 14:54:04.000000000 +0900
+++ fs2020/15.streamlike_pattern2/main.f90	2021-04-20 13:09:44.466911991 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -74,6 +90,8 @@
 
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
   PROF_START(1)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
@@ -100,7 +118,11 @@
 
   PROF_STOP(1)
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
   stop
 end program commonkernel_streamlike
diff -Nur fs2020.old/15.streamlike_pattern2/ssc.c fs2020/15.streamlike_pattern2/ssc.c
--- fs2020.old/15.streamlike_pattern2/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/15.streamlike_pattern2/ssc.c	2021-04-20 13:09:44.541911702 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/16.streamlike_pattern3/main.f90 fs2020/16.streamlike_pattern3/main.f90
--- fs2020.old/16.streamlike_pattern3/main.f90	2017-04-09 14:57:26.000000000 +0900
+++ fs2020/16.streamlike_pattern3/main.f90	2021-04-20 13:09:44.591911509 +0900
@@ -17,7 +17,23 @@
      streamlike_pattern2, &
      streamlike_pattern3
   !-----------------------------------------------------------------------------
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
 
   real(RP),dimension(16900,96,1) :: metrics
   real(RP),dimension(16900,96,1,6) :: PROG
@@ -74,6 +90,8 @@
 
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
   PROF_START(1)
 !  do iteration = 1, SET_iteration ! 100 times
   do iteration = 1, 1 ! 100 times
@@ -91,7 +109,11 @@
 
   PROF_STOP(1)
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 
   stop
 end program commonkernel_streamlike
diff -Nur fs2020.old/16.streamlike_pattern3/ssc.c fs2020/16.streamlike_pattern3/ssc.c
--- fs2020.old/16.streamlike_pattern3/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/16.streamlike_pattern3/ssc.c	2021-04-20 13:09:44.674911188 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c fs2020/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c
--- fs2020.old/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c	2017-08-21 18:15:02.000000000 +0900
+++ fs2020/17.Adventure.region0.tune4pad-acle.armtest.20170821_resize/adventure_kernel_region0_tune4_arm_pad-acle.c	2021-04-20 13:09:44.726910988 +0900
@@ -14,6 +14,13 @@
 //#include <fj_tool/fipp.h>
 //#include <fjcoll.h>
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 
 //#include "measure.h"
 //#include "matvec.h"
@@ -233,8 +240,8 @@
     svfloat64_t vec_m_5 = svld1_f64(p0, &vec_m[5][0]);
 
     for (jBlock = 0; jBlock < iBlock; jBlock++) {
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
 
       /* lower-triangular part: row-wised SIMD */
       svfloat64_t v_j    = svld1_f64(p0, &vector2[jBlock][0]);
@@ -282,8 +289,8 @@
 #else
 
     for (jBlock = 0; jBlock < iBlock; jBlock++) {
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
-      __builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+1024, 0, 1, 1);
+      //__builtin_fj_prefetch(&OffDiagComponents[instanceId][offset + jBlock][0][0]+2048, 0, 2, 1);
 
       /* lower-triangular part: row-wised SIMD */
 #pragma loop simd_redundant_vl 6
@@ -460,8 +467,9 @@
   /* add */
   int j;
   /* add end */
-  PROF_INIT;
-  PROF_START_ALL;
+  double mkrts, mkrte; struct timespec mkrtsclock;;
+  clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);;
   TheMatVec.instanceId = 0;
   TheMatVec.nDofs = SIZE;
   TheMatVec.nBlocks = MAX_DIAG_BLOCKS;
@@ -494,8 +502,9 @@
       PROF_STOP("region0");
   }
 }
-  PROF_STOP_ALL;
-  PROF_FINALIZE;
+  STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+  fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);;
   /* add. */
   double sum = 0.0e0;
   for(i=0; i<SIZE; i++){
diff -Nur fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c
--- fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/ssc.c	2021-04-20 13:09:44.791910737 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90 fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90
--- fs2020.old/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90	2016-10-11 14:46:56.000000000 +0900
+++ fs2020/18.Adventure.region1.tune01.outputcheck.160808.M24/test_dd_dot_product.f90	2021-04-20 13:09:44.850910509 +0900
@@ -1,9 +1,25 @@
 #include "profiler.h"
 program main
+  use, intrinsic :: iso_c_binding
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
   !!$ use omp_lib
   external omp_get_thread_num
   integer omp_get_thread_num
-  implicit none
+
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
   integer(kind=  4),parameter :: N = 393216
 !  integer(kind=  4),parameter :: M = 12
   integer(kind=  4),parameter :: M = 24
@@ -32,6 +48,8 @@
   !
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
 
   do j=1,M
      do i=1,N
@@ -97,7 +115,11 @@
 !  deallocate(vector_i,vector_o)
   !
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 end program main
 !
 !
diff -Nur fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c
--- fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/ssc.c	2021-04-20 13:09:44.941910158 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90 fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90
--- fs2020.old/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90	2017-07-28 14:17:14.000000000 +0900
+++ fs2020/19.Adventure.region2.tune161011.armtest-M24.170727/test_dd_dot_product.f90	2021-04-20 13:09:44.992909961 +0900
@@ -1,6 +1,22 @@
 #include "profiler.h"
 program main
+  use, intrinsic :: iso_c_binding
   implicit none
+  interface
+  integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT), value :: i,j
+  !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+  end function
+  integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+  use, intrinsic :: iso_c_binding
+  integer(C_INT),value :: i,j
+  !!!DEC$ ATTRIBUTES C::
+  !SSC_MARK_STOP
+  end function
+  end interface
+  double precision :: mkrts, mkrte, omp_get_wtime
+  integer(C_INT) :: sscfake = 1
   integer(kind=  4),parameter :: N = 393216
   integer(kind=  4),parameter :: M = 24
   integer(kind=  4),parameter :: RKP = 8
@@ -29,6 +45,8 @@
   !
   PROF_INIT
   PROF_START_ALL
+  mkrts = omp_get_wtime()
+  sscfake = SSC_MARK_START(1,0)
   do j=1,M
      do i=1,N
         if(i.eq.1) then
@@ -80,7 +98,11 @@
 !  deallocate(vector_i,vector_o)
   !
   PROF_STOP_ALL
+  sscfake = SSC_MARK_STOP(1,0)
+  mkrte = omp_get_wtime()
   PROF_FINALIZE
+  write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ", &
+     &  mkrte-mkrts, " sec", sscfake
 end program main
 !
 !
diff -Nur fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/main.F fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/main.F
--- fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/main.F	2016-07-28 08:48:48.000000000 +0900
+++ fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/main.F	2021-04-20 13:09:45.059909702 +0900
@@ -1,7 +1,23 @@
 #include "profiler.h"
 
       PROGRAM LES3X
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       ! num node and element
       integer(4) :: MP, NP  ! node(max and actual)
@@ -40,6 +56,8 @@
 
       PROF_INIT
       PROF_START_ALL
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 
       FXYZ = 0.0
       DNXP = 1.0
@@ -63,6 +81,10 @@
 #endif
 
       PROF_STOP_ALL
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
       PROF_FINALIZE
+      write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
       
       END program les3x
diff -Nur fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c
--- fs2020.old/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/20.FFB.callap_kernel2.nodebase_160127.asis.160805/ssc.c	2021-04-20 13:09:45.158909319 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/main.f fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/main.f
--- fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/main.f	2017-04-18 07:53:18.000000000 +0900
+++ fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/main.f	2021-04-20 13:09:45.234909026 +0900
@@ -1,6 +1,22 @@
 #include "profiler.h"
       program main
+      use, intrinsic :: iso_c_binding
       implicit none
+      interface
+      integer(C_INT) function SSC_MARK_START ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT), value :: i,j
+      !!!DEC$ ATTRIBUTES C:: SSC_MARK_START
+      end function
+      integer(C_INT) function SSC_MARK_STOP ( i,j ) bind ( c )
+      use, intrinsic :: iso_c_binding
+      integer(C_INT),value :: i,j
+      !!!DEC$ ATTRIBUTES C::
+      !SSC_MARK_STOP
+      end function
+      end interface
+      double precision :: mkrts, mkrte, omp_get_wtime
+      integer(C_INT) :: sscfake = 1
 
       integer*4 :: NP, NP_ORG, NV, NZ
       parameter(NP=265225)
@@ -55,6 +71,8 @@
 
       PROF_INIT
       PROF_START_ALL
+      mkrts = omp_get_wtime()
+      sscfake = SSC_MARK_START(1,0)
 !fj<
 
       !---------------------------------
@@ -153,7 +171,11 @@
 #endif
 
       PROF_STOP_ALL
+      sscfake = SSC_MARK_STOP(1,0)
+      mkrte = omp_get_wtime()
       PROF_FINALIZE
+      write(*,"(A,d17.10,A,I4)") "Walltime of the main kernel: ",
+     +  mkrte-mkrts, " sec", sscfake
 !fj<
 
       end program main
diff -Nur fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c
--- fs2020.old/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c	1970-01-01 09:00:00.000000000 +0900
+++ fs2020/21.FFB.spmmv_vec8.170330.funroll_265225.170509/ssc.c	2021-04-20 13:09:45.300908771 +0900
@@ -0,0 +1,14 @@
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
+
+int ssc_mark_start (int go, int rank) {
+	STARTSDE(go,rank);
+	return (rank << 0x1);
+}
+int ssc_mark_stop (int go, int rank) {
+	STOPSDE(go,rank);
+	return (rank >> 0x2);
+}
diff -Nur fs2020.old/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/main.cc fs2020/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/main.cc
--- fs2020.old/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/main.cc	2017-02-14 16:59:36.000000000 +0900
+++ fs2020/22.QCD.ddd_in_s_.qws-0.1.7.tune.170621/main.cc	2021-04-20 13:09:45.373908489 +0900
@@ -26,6 +26,13 @@
 #include "qwsintrin.h"
 #include "report.h"
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 
 extern int vold, vols, rank, nx, ny, nz, nt, nxh, nxd, nxs;
 extern double kappa2, kappa, mkappa;
@@ -37,8 +44,9 @@
 
 int main()
 {
-  PROF_INIT;
-  PROF_START_ALL;
+  double mkrts, mkrte; struct timespec mkrtsclock;;
+  clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);;
   
   int lx=NX;
   int ly=NY;
@@ -92,8 +100,9 @@
   report_validation(get_ss_r4(result_arr, result_arr_len),  4.747487304687500e+03, 0.01);
 #endif
 
-  PROF_STOP_ALL;
-  PROF_FINALIZE;
+  STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+  fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);;
 
   return 0;
 }
diff -Nur fs2020.old/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/main.cc fs2020/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/main.cc
--- fs2020.old/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/main.cc	2017-07-20 12:53:50.000000000 +0900
+++ fs2020/23.QCD.jinv_ddd_in_s_.qws-0.1.7.tune.170720/main.cc	2021-04-20 13:09:45.440908231 +0900
@@ -26,6 +26,13 @@
 #include "qwsintrin.h"
 #include "report.h"
 #include "profiler.h"
+#include <time.h>
+#include <stdio.h>
+#include <ittnotify.h>
+#include <signal.h>
+#include <stdlib.h>
+#define STARTSDE(go,rank) {if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1); __itt_resume(); __SSC_MARK(0x111);}
+#define STOPSDE(go,rank) {__SSC_MARK(0x222); __itt_pause(); if(go && 0==rank && getenv("PCMPID")) kill(atoi(getenv("PCMPID")),SIGUSR1);}
 
 #include "init.h"
 #include "tools.h"
@@ -42,8 +49,9 @@
 
 int main()
 {
-  PROF_INIT;
-  PROF_START_ALL;
+  double mkrts, mkrte; struct timespec mkrtsclock;;
+  clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrts = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);
+STARTSDE(1,0);;
   
   int lx=NX;
   int ly=NY;
@@ -107,8 +115,9 @@
   report_validation(get_ss_r4(result_arr, result_arr_len),  4.593723632812500e+03, 0.01);
 #endif
 
-  PROF_STOP_ALL;
-  PROF_FINALIZE;
+  STOPSDE(1,0);
+clock_gettime(CLOCK_MONOTONIC, &mkrtsclock); mkrte = (mkrtsclock.tv_sec + mkrtsclock.tv_nsec * .000000001);;
+  fprintf(stdout,"Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);;
 
   return 0;
 }
