From ea7a99144ebf4e1c770835ac7ac673aaac6852a0 Mon Sep 17 00:00:00 2001
From: Jens Domke <domke.j.aa@m.titech.ac.jp>
Date: Thu, 22 Feb 2018 22:51:52 +0900
Subject: [PATCH 1/1] CoMD: prepare precision experiment

Signed-off-by: Jens Domke <domke.j.aa@m.titech.ac.jp>
---
 .gitignore          |   4 ++
 src-openmp/CoMD.c   |  14 +++++++
 src-openmp/Makefile | 108 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 126 insertions(+)
 create mode 100644 src-openmp/Makefile

diff --git a/.gitignore b/.gitignore
index 155f4dc..365100b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,7 +15,11 @@
 *.exe
 *.out
 *.app
+bin/
 
 # Doxygen directories
 src-mpi/html
 src-mpi/latex
+
+CoMD_info.h
+.depend
diff --git a/src-openmp/CoMD.c b/src-openmp/CoMD.c
index 12466c8..4ab5004 100644
--- a/src-openmp/CoMD.c
+++ b/src-openmp/CoMD.c
@@ -82,9 +82,14 @@ static void printThings(SimFlat* s, int iStep, double elapsedTime);
 static void printSimulationDataYaml(FILE* file, SimFlat* s);
 static void sanityChecks(Command cmd, double cutoff, double latticeConst, char latticeType[8]);
 
+#include <mpi.h>
+#define STARTSDE __SSC_MARK(0x111);
+#define STOPSDE __SSC_MARK(0x222);
 
 int main(int argc, char** argv)
 {
+double mkrts, mkrte; // my kernel run-time
+STOPSDE;
    // Prolog
    initParallel(&argc, &argv);
    profileStart(totalTimer);
@@ -112,6 +117,9 @@ int main(int argc, char** argv)
    const int printRate = sim->printRate;
    int iStep = 0;
    profileStart(loopTimer);
+
+mkrts = MPI_Wtime();
+STARTSDE;
    for (; iStep<nSteps;)
    {
       startTimer(commReduceTimer);
@@ -126,10 +134,15 @@ int main(int argc, char** argv)
 
       iStep += printRate;
    }
+STOPSDE;
+mkrte = MPI_Wtime();
+if (printRank()) printf("Walltime of the main kernel: %.6lf sec\n", mkrte - mkrts);
+
    profileStop(loopTimer);
 
    sumAtoms(sim);
    printThings(sim, iStep, getElapsedTime(timestepTimer));
+
    timestampBarrier("Ending simulation\n");
 
    // Epilog
@@ -146,6 +159,7 @@ int main(int argc, char** argv)
    timestampBarrier("CoMD Ending\n");
    destroyParallel();
 
+STARTSDE;
    return 0;
 }
 
diff --git a/src-openmp/Makefile b/src-openmp/Makefile
new file mode 100644
index 0000000..5882749
--- /dev/null
+++ b/src-openmp/Makefile
@@ -0,0 +1,108 @@
+# Makefile for src-openmp
+
+SHELL = /bin/bash
+
+### CoMD can be built in either double or single precision and with or
+### without MPI.  Select desired precision and MPI here.
+
+# double precision (ON/OFF)
+DOUBLE_PRECISION = ON
+# MPI for parallel (ON/OFF)
+DO_MPI = ON
+
+### Set your desired C compiler and any necessary flags.  Note that CoMD
+### uses some c99 features.  You can also set flags for optimization and
+### specify paths to include files that the compiler can't find on its
+### own.  If you need any -L or -l switches to get C standard libraries
+### (such as -lm for the math library) put them in C_LIB.
+CC = mpicc
+CFLAGS = -std=c99 -fopenmp
+OPTFLAGS = -g -O3 -ipo -xHost
+INCLUDES = 
+C_LIB = -lm
+
+
+### If you need to specify include paths, library paths, or link flags
+### for MPI, put them here.  Put both -L and -l switches into MPI_LIB.
+MPI_LIB =
+MPI_INCLUDE =
+
+### A place to specify any other include or library switches your
+### platform requires.
+OTHER_LIB =
+OTHER_INCLUDE =
+
+
+
+
+#########################################
+### Below here, it is pitch black.  
+### You are likely to be eaten by a grue.
+##########################################
+
+# clear all suffixes
+.SUFFIXES:
+# list only those that we use 
+.SUFFIXES: .c .o
+
+.PHONY: DEFAULT clean distclean depend
+
+BIN_DIR=../bin
+
+# Check for double precision
+ifeq ($(DOUBLE_PRECISION), ON)
+CFLAGS += -DDOUBLE
+else
+CFLAGS += -DSINGLE
+endif
+
+# Set executable name and add includes & libraries for MPI if needed.
+CoMD_VARIANT = CoMD-openmp
+ifeq ($(DO_MPI), ON)
+CoMD_VARIANT = CoMD-openmp-mpi
+INCLUDES += ${MPI_INCLUDE}
+CFLAGS += -DDO_MPI
+LDFLAGS += ${MPI_LIB}
+endif
+CoMD_EXE = ${BIN_DIR}/${CoMD_VARIANT}
+
+LDFLAGS += ${C_LIB} ${OTHER_LIB}
+CFLAGS  += ${OPTFLAGS} ${INCLUDES} ${OTHER_INCLUDE}
+
+
+SOURCES=$(wildcard *.c)
+OBJECTS=$(SOURCES:.c=.o)
+
+
+DEFAULT: ${CoMD_EXE}
+
+%.o: %.c
+	${CC} ${CFLAGS} -c $< -o $@
+
+${CoMD_EXE}: ${BIN_DIR} CoMD_info.h ${OBJECTS} 
+	${CC} ${CFLAGS} -o ${CoMD_EXE} ${OBJECTS} ${LDFLAGS}
+
+CoMD_info.h: Makefile
+	./generate_info_header ${CoMD_VARIANT} "$(CC)" "$(CFLAGS)" "$(LDFLAGS)"
+
+${BIN_DIR}:
+	@if [ ! -d ${BIN_DIR} ]; then mkdir -p ${BIN_DIR} ; fi
+
+clean:
+	rm -f *.o CoMD_info.h .depend
+
+distclean: clean
+	rm -f ${CoMD_EXE} .depend.bak
+	rm -rf html latex
+
+.depend: $(SOURCES)
+	@touch .depend
+	@$(MAKE) --no-print-directory depend
+
+depend:
+	@echo "Rebuilding dependencies..."
+	@$(MAKE) CoMD_info.h
+	@makedepend -f .depend -Y. --$(CFLAGS)-- $(SOURCES) 2> /dev/null
+
+
+-include .depend
-- 
1.8.3.1

