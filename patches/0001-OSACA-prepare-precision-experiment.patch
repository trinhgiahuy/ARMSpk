From d6e92a62be2cb7ee6a38dd6fd2fd6d3c2ec4b43f Mon Sep 17 00:00:00 2001
From: Jens Domke <domke.j.aa@m.titech.ac.jp>
Date: Tue, 20 Apr 2021 20:26:04 +0900
Subject: [PATCH] OSACA: prepare precision experiment

---
 osaca/osaca.py                   | 14 +++++++++-----
 osaca/semantics/isa_semantics.py |  6 +++---
 osaca/semantics/kernel_dg.py     |  2 +-
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/osaca/osaca.py b/osaca/osaca.py
index d010bab..c4908b1 100755
--- a/osaca/osaca.py
+++ b/osaca/osaca.py
@@ -259,7 +259,7 @@ def insert_byte_marker(args):
         f.write(assembly)
 
 
-def inspect(args, output_file=sys.stdout):
+def inspect(args, output_file=sys.stdout, machine_model=None, isa=None):
     """
     Does the actual throughput and critical path analysis of OSACA and prints it to the
     terminal.
@@ -274,7 +274,8 @@ def inspect(args, output_file=sys.stdout):
     # Detect ISA if necessary
     arch = args.arch if args.arch is not None else DEFAULT_ARCHS[BaseParser.detect_ISA(code)]
     print_arch_warning = False if args.arch else True
-    isa = MachineModel.get_isa_for_arch(arch)
+    if not isa:
+        isa = MachineModel.get_isa_for_arch(arch)
     verbose = args.verbose
     ignore_unknown = args.ignore_unknown
 
@@ -308,7 +309,8 @@ def inspect(args, output_file=sys.stdout):
         print_length_warning = (
             True if len(kernel) == len(parsed_code) and len(kernel) > 100 else False
         )
-    machine_model = MachineModel(arch=arch)
+    if not machine_model:
+        machine_model = MachineModel(arch=arch)
     semantics = ArchSemantics(machine_model)
     semantics.add_semantics(kernel)
     # Do optimal schedule for kernel throughput if wished
@@ -333,9 +335,10 @@ def inspect(args, output_file=sys.stdout):
         ),
         file=output_file,
     )
+    return (machine_model, isa)
 
 
-def run(args, output_file=sys.stdout):
+def run(args, output_file=sys.stdout, mmodel=None, misa=None):
     """
     Main entry point for OSACAs workflow. Decides whether to run an analysis or other things.
 
@@ -357,7 +360,8 @@ def run(args, output_file=sys.stdout):
         insert_byte_marker(args)
     else:
         # Analyze kernel
-        inspect(args, output_file=output_file)
+        return inspect(args, output_file=output_file,
+                       machine_model=mmodel, isa=misa)
 
 
 @lru_cache()
diff --git a/osaca/semantics/isa_semantics.py b/osaca/semantics/isa_semantics.py
index eca5869..0d47507 100755
--- a/osaca/semantics/isa_semantics.py
+++ b/osaca/semantics/isa_semantics.py
@@ -163,7 +163,7 @@ class ISASemantics(object):
                     base_name = o.memory.base.get('prefix', '')+o.memory.base.name
                     return {base_name: {
                         'name': o.memory.base.get('prefix', '')+o.memory.base.name,
-                        'value': int(o.memory.post_indexed.value)
+                        'value': int(o.memory.post_indexed.value, 0)
                     }}
             return {}
 
@@ -181,7 +181,7 @@ class ISASemantics(object):
                 reg_operand_names = {base_name: 'op1'}
                 operand_state = {'op1': {
                     'name': base_name,
-                    'value': int(o.memory.offset.value)
+                    'value': int(o.memory.offset.value, 0)
                 }}
 
         if isa_data is not None and 'operation' in isa_data:
@@ -194,7 +194,7 @@ class ISASemantics(object):
                         'name': o_reg_name,
                         'value': 0}
                 elif "immediate" in o:
-                    operand_state[operand_name] = {'value': int(o["immediate"]["value"])}
+                    operand_state[operand_name] = {'value': int(o["immediate"]["value"], 0)}
                 elif "memory" in o:
                     # TODO lea needs some thinking about
                     pass
diff --git a/osaca/semantics/kernel_dg.py b/osaca/semantics/kernel_dg.py
index 2bff2be..45e31d8 100755
--- a/osaca/semantics/kernel_dg.py
+++ b/osaca/semantics/kernel_dg.py
@@ -140,7 +140,7 @@ class KernelDG(nx.DiGraph):
                         # terminate running processes
                         for p in processes:
                             if p.is_alive():
-                                p.kill()
+                                p.terminate()
                             p.join()
                 all_paths = list(all_paths)
         else:
-- 
1.8.3.1

